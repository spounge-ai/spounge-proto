// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: nodus/v1/mcp/v1/server.proto

package mcpv1

import (
	v1 "github.com/spounge-ai/spounge-proto/gen/go/nodus/v1/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MCPServerType int32

const (
	MCPServerType_MCP_SERVER_TYPE_UNSPECIFIED MCPServerType = 0
	MCPServerType_MCP_SERVER_TYPE_HTTP        MCPServerType = 1
	MCPServerType_MCP_SERVER_TYPE_WEBSOCKET   MCPServerType = 2
	MCPServerType_MCP_SERVER_TYPE_GRPC        MCPServerType = 3
	MCPServerType_MCP_SERVER_TYPE_STDIO       MCPServerType = 4
	MCPServerType_MCP_SERVER_TYPE_TCP         MCPServerType = 5
)

// Enum value maps for MCPServerType.
var (
	MCPServerType_name = map[int32]string{
		0: "MCP_SERVER_TYPE_UNSPECIFIED",
		1: "MCP_SERVER_TYPE_HTTP",
		2: "MCP_SERVER_TYPE_WEBSOCKET",
		3: "MCP_SERVER_TYPE_GRPC",
		4: "MCP_SERVER_TYPE_STDIO",
		5: "MCP_SERVER_TYPE_TCP",
	}
	MCPServerType_value = map[string]int32{
		"MCP_SERVER_TYPE_UNSPECIFIED": 0,
		"MCP_SERVER_TYPE_HTTP":        1,
		"MCP_SERVER_TYPE_WEBSOCKET":   2,
		"MCP_SERVER_TYPE_GRPC":        3,
		"MCP_SERVER_TYPE_STDIO":       4,
		"MCP_SERVER_TYPE_TCP":         5,
	}
)

func (x MCPServerType) Enum() *MCPServerType {
	p := new(MCPServerType)
	*p = x
	return p
}

func (x MCPServerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MCPServerType) Descriptor() protoreflect.EnumDescriptor {
	return file_nodus_v1_mcp_v1_server_proto_enumTypes[0].Descriptor()
}

func (MCPServerType) Type() protoreflect.EnumType {
	return &file_nodus_v1_mcp_v1_server_proto_enumTypes[0]
}

func (x MCPServerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MCPServerType.Descriptor instead.
func (MCPServerType) EnumDescriptor() ([]byte, []int) {
	return file_nodus_v1_mcp_v1_server_proto_rawDescGZIP(), []int{0}
}

type MCPServerStatus int32

const (
	MCPServerStatus_MCP_SERVER_STATUS_UNSPECIFIED  MCPServerStatus = 0
	MCPServerStatus_MCP_SERVER_STATUS_HEALTHY      MCPServerStatus = 1
	MCPServerStatus_MCP_SERVER_STATUS_UNHEALTHY    MCPServerStatus = 2
	MCPServerStatus_MCP_SERVER_STATUS_CONNECTING   MCPServerStatus = 3
	MCPServerStatus_MCP_SERVER_STATUS_DISCONNECTED MCPServerStatus = 4
	MCPServerStatus_MCP_SERVER_STATUS_MAINTENANCE  MCPServerStatus = 5
)

// Enum value maps for MCPServerStatus.
var (
	MCPServerStatus_name = map[int32]string{
		0: "MCP_SERVER_STATUS_UNSPECIFIED",
		1: "MCP_SERVER_STATUS_HEALTHY",
		2: "MCP_SERVER_STATUS_UNHEALTHY",
		3: "MCP_SERVER_STATUS_CONNECTING",
		4: "MCP_SERVER_STATUS_DISCONNECTED",
		5: "MCP_SERVER_STATUS_MAINTENANCE",
	}
	MCPServerStatus_value = map[string]int32{
		"MCP_SERVER_STATUS_UNSPECIFIED":  0,
		"MCP_SERVER_STATUS_HEALTHY":      1,
		"MCP_SERVER_STATUS_UNHEALTHY":    2,
		"MCP_SERVER_STATUS_CONNECTING":   3,
		"MCP_SERVER_STATUS_DISCONNECTED": 4,
		"MCP_SERVER_STATUS_MAINTENANCE":  5,
	}
)

func (x MCPServerStatus) Enum() *MCPServerStatus {
	p := new(MCPServerStatus)
	*p = x
	return p
}

func (x MCPServerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MCPServerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_nodus_v1_mcp_v1_server_proto_enumTypes[1].Descriptor()
}

func (MCPServerStatus) Type() protoreflect.EnumType {
	return &file_nodus_v1_mcp_v1_server_proto_enumTypes[1]
}

func (x MCPServerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MCPServerStatus.Descriptor instead.
func (MCPServerStatus) EnumDescriptor() ([]byte, []int) {
	return file_nodus_v1_mcp_v1_server_proto_rawDescGZIP(), []int{1}
}

type MCPServerInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ServerId         string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Endpoint         string                 `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ServerType       MCPServerType          `protobuf:"varint,4,opt,name=server_type,json=serverType,proto3,enum=nodus.v1.mcp.v1.MCPServerType" json:"server_type,omitempty"`
	Status           MCPServerStatus        `protobuf:"varint,5,opt,name=status,proto3,enum=nodus.v1.mcp.v1.MCPServerStatus" json:"status,omitempty"`
	Capabilities     *MCPServerCapabilities `protobuf:"bytes,6,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	ConnectionConfig *MCPConnectionConfig   `protobuf:"bytes,7,opt,name=connection_config,json=connectionConfig,proto3" json:"connection_config,omitempty"`
	Metadata         map[string]string      `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RegisteredAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=registered_at,json=registeredAt,proto3" json:"registered_at,omitempty"`
	LastPing         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_ping,json=lastPing,proto3" json:"last_ping,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MCPServerInfo) Reset() {
	*x = MCPServerInfo{}
	mi := &file_nodus_v1_mcp_v1_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPServerInfo) ProtoMessage() {}

func (x *MCPServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nodus_v1_mcp_v1_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPServerInfo.ProtoReflect.Descriptor instead.
func (*MCPServerInfo) Descriptor() ([]byte, []int) {
	return file_nodus_v1_mcp_v1_server_proto_rawDescGZIP(), []int{0}
}

func (x *MCPServerInfo) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *MCPServerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MCPServerInfo) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *MCPServerInfo) GetServerType() MCPServerType {
	if x != nil {
		return x.ServerType
	}
	return MCPServerType_MCP_SERVER_TYPE_UNSPECIFIED
}

func (x *MCPServerInfo) GetStatus() MCPServerStatus {
	if x != nil {
		return x.Status
	}
	return MCPServerStatus_MCP_SERVER_STATUS_UNSPECIFIED
}

func (x *MCPServerInfo) GetCapabilities() *MCPServerCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *MCPServerInfo) GetConnectionConfig() *MCPConnectionConfig {
	if x != nil {
		return x.ConnectionConfig
	}
	return nil
}

func (x *MCPServerInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MCPServerInfo) GetRegisteredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RegisteredAt
	}
	return nil
}

func (x *MCPServerInfo) GetLastPing() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPing
	}
	return nil
}

type MCPServerCapabilities struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ProtocolVersion         string                 `protobuf:"bytes,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	SupportedFeatures       []string               `protobuf:"bytes,2,rep,name=supported_features,json=supportedFeatures,proto3" json:"supported_features,omitempty"`
	MaxConcurrentRequests   int32                  `protobuf:"varint,3,opt,name=max_concurrent_requests,json=maxConcurrentRequests,proto3" json:"max_concurrent_requests,omitempty"`
	SupportedToolCategories []string               `protobuf:"bytes,4,rep,name=supported_tool_categories,json=supportedToolCategories,proto3" json:"supported_tool_categories,omitempty"`
	SupportsStreaming       bool                   `protobuf:"varint,5,opt,name=supports_streaming,json=supportsStreaming,proto3" json:"supports_streaming,omitempty"`
	SupportsFileOperations  bool                   `protobuf:"varint,6,opt,name=supports_file_operations,json=supportsFileOperations,proto3" json:"supports_file_operations,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *MCPServerCapabilities) Reset() {
	*x = MCPServerCapabilities{}
	mi := &file_nodus_v1_mcp_v1_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPServerCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPServerCapabilities) ProtoMessage() {}

func (x *MCPServerCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_nodus_v1_mcp_v1_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPServerCapabilities.ProtoReflect.Descriptor instead.
func (*MCPServerCapabilities) Descriptor() ([]byte, []int) {
	return file_nodus_v1_mcp_v1_server_proto_rawDescGZIP(), []int{1}
}

func (x *MCPServerCapabilities) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *MCPServerCapabilities) GetSupportedFeatures() []string {
	if x != nil {
		return x.SupportedFeatures
	}
	return nil
}

func (x *MCPServerCapabilities) GetMaxConcurrentRequests() int32 {
	if x != nil {
		return x.MaxConcurrentRequests
	}
	return 0
}

func (x *MCPServerCapabilities) GetSupportedToolCategories() []string {
	if x != nil {
		return x.SupportedToolCategories
	}
	return nil
}

func (x *MCPServerCapabilities) GetSupportsStreaming() bool {
	if x != nil {
		return x.SupportsStreaming
	}
	return false
}

func (x *MCPServerCapabilities) GetSupportsFileOperations() bool {
	if x != nil {
		return x.SupportsFileOperations
	}
	return false
}

type MCPConnectionConfig struct {
	state             protoimpl.MessageState   `protogen:"open.v1"`
	ConnectionTimeout *durationpb.Duration     `protobuf:"bytes,1,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
	RequestTimeout    *durationpb.Duration     `protobuf:"bytes,2,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	MaxRetries        int32                    `protobuf:"varint,3,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	RetryBackoff      *durationpb.Duration     `protobuf:"bytes,4,opt,name=retry_backoff,json=retryBackoff,proto3" json:"retry_backoff,omitempty"`
	EnableKeepAlive   bool                     `protobuf:"varint,5,opt,name=enable_keep_alive,json=enableKeepAlive,proto3" json:"enable_keep_alive,omitempty"`
	KeepAliveInterval *durationpb.Duration     `protobuf:"bytes,6,opt,name=keep_alive_interval,json=keepAliveInterval,proto3" json:"keep_alive_interval,omitempty"`
	Headers           map[string]string        `protobuf:"bytes,7,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AuthConfig        *v1.AuthenticationConfig `protobuf:"bytes,8,opt,name=auth_config,json=authConfig,proto3" json:"auth_config,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MCPConnectionConfig) Reset() {
	*x = MCPConnectionConfig{}
	mi := &file_nodus_v1_mcp_v1_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPConnectionConfig) ProtoMessage() {}

func (x *MCPConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_nodus_v1_mcp_v1_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPConnectionConfig.ProtoReflect.Descriptor instead.
func (*MCPConnectionConfig) Descriptor() ([]byte, []int) {
	return file_nodus_v1_mcp_v1_server_proto_rawDescGZIP(), []int{2}
}

func (x *MCPConnectionConfig) GetConnectionTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectionTimeout
	}
	return nil
}

func (x *MCPConnectionConfig) GetRequestTimeout() *durationpb.Duration {
	if x != nil {
		return x.RequestTimeout
	}
	return nil
}

func (x *MCPConnectionConfig) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *MCPConnectionConfig) GetRetryBackoff() *durationpb.Duration {
	if x != nil {
		return x.RetryBackoff
	}
	return nil
}

func (x *MCPConnectionConfig) GetEnableKeepAlive() bool {
	if x != nil {
		return x.EnableKeepAlive
	}
	return false
}

func (x *MCPConnectionConfig) GetKeepAliveInterval() *durationpb.Duration {
	if x != nil {
		return x.KeepAliveInterval
	}
	return nil
}

func (x *MCPConnectionConfig) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *MCPConnectionConfig) GetAuthConfig() *v1.AuthenticationConfig {
	if x != nil {
		return x.AuthConfig
	}
	return nil
}

var File_nodus_v1_mcp_v1_server_proto protoreflect.FileDescriptor

const file_nodus_v1_mcp_v1_server_proto_rawDesc = "" +
	"\n" +
	"\x1cnodus/v1/mcp/v1/server.proto\x12\x0fnodus.v1.mcp.v1\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1dnodus/v1/common/v1/auth.proto\"\xf7\x04\n" +
	"\rMCPServerInfo\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\bendpoint\x18\x03 \x01(\tR\bendpoint\x12?\n" +
	"\vserver_type\x18\x04 \x01(\x0e2\x1e.nodus.v1.mcp.v1.MCPServerTypeR\n" +
	"serverType\x128\n" +
	"\x06status\x18\x05 \x01(\x0e2 .nodus.v1.mcp.v1.MCPServerStatusR\x06status\x12J\n" +
	"\fcapabilities\x18\x06 \x01(\v2&.nodus.v1.mcp.v1.MCPServerCapabilitiesR\fcapabilities\x12Q\n" +
	"\x11connection_config\x18\a \x01(\v2$.nodus.v1.mcp.v1.MCPConnectionConfigR\x10connectionConfig\x12H\n" +
	"\bmetadata\x18\b \x03(\v2,.nodus.v1.mcp.v1.MCPServerInfo.MetadataEntryR\bmetadata\x12?\n" +
	"\rregistered_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\fregisteredAt\x127\n" +
	"\tlast_ping\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\blastPing\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xce\x02\n" +
	"\x15MCPServerCapabilities\x12)\n" +
	"\x10protocol_version\x18\x01 \x01(\tR\x0fprotocolVersion\x12-\n" +
	"\x12supported_features\x18\x02 \x03(\tR\x11supportedFeatures\x126\n" +
	"\x17max_concurrent_requests\x18\x03 \x01(\x05R\x15maxConcurrentRequests\x12:\n" +
	"\x19supported_tool_categories\x18\x04 \x03(\tR\x17supportedToolCategories\x12-\n" +
	"\x12supports_streaming\x18\x05 \x01(\bR\x11supportsStreaming\x128\n" +
	"\x18supports_file_operations\x18\x06 \x01(\bR\x16supportsFileOperations\"\xcf\x04\n" +
	"\x13MCPConnectionConfig\x12H\n" +
	"\x12connection_timeout\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\x11connectionTimeout\x12B\n" +
	"\x0frequest_timeout\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x0erequestTimeout\x12\x1f\n" +
	"\vmax_retries\x18\x03 \x01(\x05R\n" +
	"maxRetries\x12>\n" +
	"\rretry_backoff\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\fretryBackoff\x12*\n" +
	"\x11enable_keep_alive\x18\x05 \x01(\bR\x0fenableKeepAlive\x12I\n" +
	"\x13keep_alive_interval\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\x11keepAliveInterval\x12K\n" +
	"\aheaders\x18\a \x03(\v21.nodus.v1.mcp.v1.MCPConnectionConfig.HeadersEntryR\aheaders\x12I\n" +
	"\vauth_config\x18\b \x01(\v2(.nodus.v1.common.v1.AuthenticationConfigR\n" +
	"authConfig\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*\xb7\x01\n" +
	"\rMCPServerType\x12\x1f\n" +
	"\x1bMCP_SERVER_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14MCP_SERVER_TYPE_HTTP\x10\x01\x12\x1d\n" +
	"\x19MCP_SERVER_TYPE_WEBSOCKET\x10\x02\x12\x18\n" +
	"\x14MCP_SERVER_TYPE_GRPC\x10\x03\x12\x19\n" +
	"\x15MCP_SERVER_TYPE_STDIO\x10\x04\x12\x17\n" +
	"\x13MCP_SERVER_TYPE_TCP\x10\x05*\xdd\x01\n" +
	"\x0fMCPServerStatus\x12!\n" +
	"\x1dMCP_SERVER_STATUS_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19MCP_SERVER_STATUS_HEALTHY\x10\x01\x12\x1f\n" +
	"\x1bMCP_SERVER_STATUS_UNHEALTHY\x10\x02\x12 \n" +
	"\x1cMCP_SERVER_STATUS_CONNECTING\x10\x03\x12\"\n" +
	"\x1eMCP_SERVER_STATUS_DISCONNECTED\x10\x04\x12!\n" +
	"\x1dMCP_SERVER_STATUS_MAINTENANCE\x10\x05B\xc3\x01\n" +
	"\x13com.nodus.v1.mcp.v1B\vServerProtoP\x01Z@github.com/spounge-ai/spounge-proto/gen/go/nodus/v1/mcp/v1;mcpv1\xa2\x02\x03NVM\xaa\x02\x0fNodus.V1.Mcp.V1\xca\x02\x0fNodus\\V1\\Mcp\\V1\xe2\x02\x1bNodus\\V1\\Mcp\\V1\\GPBMetadata\xea\x02\x12Nodus::V1::Mcp::V1b\x06proto3"

var (
	file_nodus_v1_mcp_v1_server_proto_rawDescOnce sync.Once
	file_nodus_v1_mcp_v1_server_proto_rawDescData []byte
)

func file_nodus_v1_mcp_v1_server_proto_rawDescGZIP() []byte {
	file_nodus_v1_mcp_v1_server_proto_rawDescOnce.Do(func() {
		file_nodus_v1_mcp_v1_server_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nodus_v1_mcp_v1_server_proto_rawDesc), len(file_nodus_v1_mcp_v1_server_proto_rawDesc)))
	})
	return file_nodus_v1_mcp_v1_server_proto_rawDescData
}

var file_nodus_v1_mcp_v1_server_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_nodus_v1_mcp_v1_server_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_nodus_v1_mcp_v1_server_proto_goTypes = []any{
	(MCPServerType)(0),              // 0: nodus.v1.mcp.v1.MCPServerType
	(MCPServerStatus)(0),            // 1: nodus.v1.mcp.v1.MCPServerStatus
	(*MCPServerInfo)(nil),           // 2: nodus.v1.mcp.v1.MCPServerInfo
	(*MCPServerCapabilities)(nil),   // 3: nodus.v1.mcp.v1.MCPServerCapabilities
	(*MCPConnectionConfig)(nil),     // 4: nodus.v1.mcp.v1.MCPConnectionConfig
	nil,                             // 5: nodus.v1.mcp.v1.MCPServerInfo.MetadataEntry
	nil,                             // 6: nodus.v1.mcp.v1.MCPConnectionConfig.HeadersEntry
	(*timestamppb.Timestamp)(nil),   // 7: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),     // 8: google.protobuf.Duration
	(*v1.AuthenticationConfig)(nil), // 9: nodus.v1.common.v1.AuthenticationConfig
}
var file_nodus_v1_mcp_v1_server_proto_depIdxs = []int32{
	0,  // 0: nodus.v1.mcp.v1.MCPServerInfo.server_type:type_name -> nodus.v1.mcp.v1.MCPServerType
	1,  // 1: nodus.v1.mcp.v1.MCPServerInfo.status:type_name -> nodus.v1.mcp.v1.MCPServerStatus
	3,  // 2: nodus.v1.mcp.v1.MCPServerInfo.capabilities:type_name -> nodus.v1.mcp.v1.MCPServerCapabilities
	4,  // 3: nodus.v1.mcp.v1.MCPServerInfo.connection_config:type_name -> nodus.v1.mcp.v1.MCPConnectionConfig
	5,  // 4: nodus.v1.mcp.v1.MCPServerInfo.metadata:type_name -> nodus.v1.mcp.v1.MCPServerInfo.MetadataEntry
	7,  // 5: nodus.v1.mcp.v1.MCPServerInfo.registered_at:type_name -> google.protobuf.Timestamp
	7,  // 6: nodus.v1.mcp.v1.MCPServerInfo.last_ping:type_name -> google.protobuf.Timestamp
	8,  // 7: nodus.v1.mcp.v1.MCPConnectionConfig.connection_timeout:type_name -> google.protobuf.Duration
	8,  // 8: nodus.v1.mcp.v1.MCPConnectionConfig.request_timeout:type_name -> google.protobuf.Duration
	8,  // 9: nodus.v1.mcp.v1.MCPConnectionConfig.retry_backoff:type_name -> google.protobuf.Duration
	8,  // 10: nodus.v1.mcp.v1.MCPConnectionConfig.keep_alive_interval:type_name -> google.protobuf.Duration
	6,  // 11: nodus.v1.mcp.v1.MCPConnectionConfig.headers:type_name -> nodus.v1.mcp.v1.MCPConnectionConfig.HeadersEntry
	9,  // 12: nodus.v1.mcp.v1.MCPConnectionConfig.auth_config:type_name -> nodus.v1.common.v1.AuthenticationConfig
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_nodus_v1_mcp_v1_server_proto_init() }
func file_nodus_v1_mcp_v1_server_proto_init() {
	if File_nodus_v1_mcp_v1_server_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nodus_v1_mcp_v1_server_proto_rawDesc), len(file_nodus_v1_mcp_v1_server_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nodus_v1_mcp_v1_server_proto_goTypes,
		DependencyIndexes: file_nodus_v1_mcp_v1_server_proto_depIdxs,
		EnumInfos:         file_nodus_v1_mcp_v1_server_proto_enumTypes,
		MessageInfos:      file_nodus_v1_mcp_v1_server_proto_msgTypes,
	}.Build()
	File_nodus_v1_mcp_v1_server_proto = out.File
	file_nodus_v1_mcp_v1_server_proto_goTypes = nil
	file_nodus_v1_mcp_v1_server_proto_depIdxs = nil
}
