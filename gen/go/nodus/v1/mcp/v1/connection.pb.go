// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: nodus/v1/mcp/v1/connection.proto

package mcpv1

import (
	v1 "github.com/spounge-ai/spounge-proto/gen/go/nodus/v1/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterMCPServerRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ServerId         string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Endpoint         string                 `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ServerType       MCPServerType          `protobuf:"varint,3,opt,name=server_type,json=serverType,proto3,enum=nodus.v1.mcp.v1.MCPServerType" json:"server_type,omitempty"`
	ConnectionConfig *MCPConnectionConfig   `protobuf:"bytes,4,opt,name=connection_config,json=connectionConfig,proto3" json:"connection_config,omitempty"`
	Metadata         map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RegisterMCPServerRequest) Reset() {
	*x = RegisterMCPServerRequest{}
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterMCPServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMCPServerRequest) ProtoMessage() {}

func (x *RegisterMCPServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMCPServerRequest.ProtoReflect.Descriptor instead.
func (*RegisterMCPServerRequest) Descriptor() ([]byte, []int) {
	return file_nodus_v1_mcp_v1_connection_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterMCPServerRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *RegisterMCPServerRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *RegisterMCPServerRequest) GetServerType() MCPServerType {
	if x != nil {
		return x.ServerType
	}
	return MCPServerType_MCP_SERVER_TYPE_UNSPECIFIED
}

func (x *RegisterMCPServerRequest) GetConnectionConfig() *MCPConnectionConfig {
	if x != nil {
		return x.ConnectionConfig
	}
	return nil
}

func (x *RegisterMCPServerRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type RegisterMCPServerResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Success        bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ServerId       string                 `protobuf:"bytes,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Capabilities   *MCPServerCapabilities `protobuf:"bytes,3,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	AvailableTools []*MCPTool             `protobuf:"bytes,4,rep,name=available_tools,json=availableTools,proto3" json:"available_tools,omitempty"`
	Error          *v1.ExecutionError     `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RegisterMCPServerResponse) Reset() {
	*x = RegisterMCPServerResponse{}
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterMCPServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMCPServerResponse) ProtoMessage() {}

func (x *RegisterMCPServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMCPServerResponse.ProtoReflect.Descriptor instead.
func (*RegisterMCPServerResponse) Descriptor() ([]byte, []int) {
	return file_nodus_v1_mcp_v1_connection_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterMCPServerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterMCPServerResponse) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *RegisterMCPServerResponse) GetCapabilities() *MCPServerCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *RegisterMCPServerResponse) GetAvailableTools() []*MCPTool {
	if x != nil {
		return x.AvailableTools
	}
	return nil
}

func (x *RegisterMCPServerResponse) GetError() *v1.ExecutionError {
	if x != nil {
		return x.Error
	}
	return nil
}

type ListMCPServersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerIds     []string               `protobuf:"bytes,1,rep,name=server_ids,json=serverIds,proto3" json:"server_ids,omitempty"`
	StatusFilter  MCPServerStatus        `protobuf:"varint,2,opt,name=status_filter,json=statusFilter,proto3,enum=nodus.v1.mcp.v1.MCPServerStatus" json:"status_filter,omitempty"`
	IncludeTools  bool                   `protobuf:"varint,3,opt,name=include_tools,json=includeTools,proto3" json:"include_tools,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMCPServersRequest) Reset() {
	*x = ListMCPServersRequest{}
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMCPServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMCPServersRequest) ProtoMessage() {}

func (x *ListMCPServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMCPServersRequest.ProtoReflect.Descriptor instead.
func (*ListMCPServersRequest) Descriptor() ([]byte, []int) {
	return file_nodus_v1_mcp_v1_connection_proto_rawDescGZIP(), []int{2}
}

func (x *ListMCPServersRequest) GetServerIds() []string {
	if x != nil {
		return x.ServerIds
	}
	return nil
}

func (x *ListMCPServersRequest) GetStatusFilter() MCPServerStatus {
	if x != nil {
		return x.StatusFilter
	}
	return MCPServerStatus_MCP_SERVER_STATUS_UNSPECIFIED
}

func (x *ListMCPServersRequest) GetIncludeTools() bool {
	if x != nil {
		return x.IncludeTools
	}
	return false
}

type ListMCPServersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Servers       []*MCPServerInfo       `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	TotalServers  int32                  `protobuf:"varint,2,opt,name=total_servers,json=totalServers,proto3" json:"total_servers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMCPServersResponse) Reset() {
	*x = ListMCPServersResponse{}
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMCPServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMCPServersResponse) ProtoMessage() {}

func (x *ListMCPServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMCPServersResponse.ProtoReflect.Descriptor instead.
func (*ListMCPServersResponse) Descriptor() ([]byte, []int) {
	return file_nodus_v1_mcp_v1_connection_proto_rawDescGZIP(), []int{3}
}

func (x *ListMCPServersResponse) GetServers() []*MCPServerInfo {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *ListMCPServersResponse) GetTotalServers() int32 {
	if x != nil {
		return x.TotalServers
	}
	return 0
}

type QueryMCPToolsRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ServerIds         []string               `protobuf:"bytes,1,rep,name=server_ids,json=serverIds,proto3" json:"server_ids,omitempty"`
	Filter            *ToolFilter            `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit             int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	ContinuationToken string                 `protobuf:"bytes,4,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *QueryMCPToolsRequest) Reset() {
	*x = QueryMCPToolsRequest{}
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryMCPToolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMCPToolsRequest) ProtoMessage() {}

func (x *QueryMCPToolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMCPToolsRequest.ProtoReflect.Descriptor instead.
func (*QueryMCPToolsRequest) Descriptor() ([]byte, []int) {
	return file_nodus_v1_mcp_v1_connection_proto_rawDescGZIP(), []int{4}
}

func (x *QueryMCPToolsRequest) GetServerIds() []string {
	if x != nil {
		return x.ServerIds
	}
	return nil
}

func (x *QueryMCPToolsRequest) GetFilter() *ToolFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryMCPToolsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryMCPToolsRequest) GetContinuationToken() string {
	if x != nil {
		return x.ContinuationToken
	}
	return ""
}

type QueryMCPToolsResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Tools                 []*MCPTool             `protobuf:"bytes,1,rep,name=tools,proto3" json:"tools,omitempty"`
	NextContinuationToken string                 `protobuf:"bytes,2,opt,name=next_continuation_token,json=nextContinuationToken,proto3" json:"next_continuation_token,omitempty"`
	TotalMatches          int32                  `protobuf:"varint,3,opt,name=total_matches,json=totalMatches,proto3" json:"total_matches,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *QueryMCPToolsResponse) Reset() {
	*x = QueryMCPToolsResponse{}
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryMCPToolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMCPToolsResponse) ProtoMessage() {}

func (x *QueryMCPToolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMCPToolsResponse.ProtoReflect.Descriptor instead.
func (*QueryMCPToolsResponse) Descriptor() ([]byte, []int) {
	return file_nodus_v1_mcp_v1_connection_proto_rawDescGZIP(), []int{5}
}

func (x *QueryMCPToolsResponse) GetTools() []*MCPTool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *QueryMCPToolsResponse) GetNextContinuationToken() string {
	if x != nil {
		return x.NextContinuationToken
	}
	return ""
}

func (x *QueryMCPToolsResponse) GetTotalMatches() int32 {
	if x != nil {
		return x.TotalMatches
	}
	return 0
}

type ToolFilter struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Categories        []ToolCategory         `protobuf:"varint,1,rep,packed,name=categories,proto3,enum=nodus.v1.mcp.v1.ToolCategory" json:"categories,omitempty"`
	Tags              []string               `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	NamePattern       string                 `protobuf:"bytes,3,opt,name=name_pattern,json=namePattern,proto3" json:"name_pattern,omitempty"`
	SupportsStreaming bool                   `protobuf:"varint,4,opt,name=supports_streaming,json=supportsStreaming,proto3" json:"supports_streaming,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ToolFilter) Reset() {
	*x = ToolFilter{}
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolFilter) ProtoMessage() {}

func (x *ToolFilter) ProtoReflect() protoreflect.Message {
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolFilter.ProtoReflect.Descriptor instead.
func (*ToolFilter) Descriptor() ([]byte, []int) {
	return file_nodus_v1_mcp_v1_connection_proto_rawDescGZIP(), []int{6}
}

func (x *ToolFilter) GetCategories() []ToolCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *ToolFilter) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ToolFilter) GetNamePattern() string {
	if x != nil {
		return x.NamePattern
	}
	return ""
}

func (x *ToolFilter) GetSupportsStreaming() bool {
	if x != nil {
		return x.SupportsStreaming
	}
	return false
}

type MCPToolInvocation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToolId        string                 `protobuf:"bytes,1,opt,name=tool_id,json=toolId,proto3" json:"tool_id,omitempty"`
	ServerId      string                 `protobuf:"bytes,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Parameters    *structpb.Struct       `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty"`
	Options       *ToolInvocationOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MCPToolInvocation) Reset() {
	*x = MCPToolInvocation{}
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPToolInvocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPToolInvocation) ProtoMessage() {}

func (x *MCPToolInvocation) ProtoReflect() protoreflect.Message {
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPToolInvocation.ProtoReflect.Descriptor instead.
func (*MCPToolInvocation) Descriptor() ([]byte, []int) {
	return file_nodus_v1_mcp_v1_connection_proto_rawDescGZIP(), []int{7}
}

func (x *MCPToolInvocation) GetToolId() string {
	if x != nil {
		return x.ToolId
	}
	return ""
}

func (x *MCPToolInvocation) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *MCPToolInvocation) GetParameters() *structpb.Struct {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *MCPToolInvocation) GetOptions() *ToolInvocationOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ToolInvocationOptions struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ValidateParameters  bool                   `protobuf:"varint,1,opt,name=validate_parameters,json=validateParameters,proto3" json:"validate_parameters,omitempty"`
	RequireConfirmation bool                   `protobuf:"varint,2,opt,name=require_confirmation,json=requireConfirmation,proto3" json:"require_confirmation,omitempty"`
	Timeout             *durationpb.Duration   `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Context             map[string]string      `protobuf:"bytes,4,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ToolInvocationOptions) Reset() {
	*x = ToolInvocationOptions{}
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolInvocationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolInvocationOptions) ProtoMessage() {}

func (x *ToolInvocationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolInvocationOptions.ProtoReflect.Descriptor instead.
func (*ToolInvocationOptions) Descriptor() ([]byte, []int) {
	return file_nodus_v1_mcp_v1_connection_proto_rawDescGZIP(), []int{8}
}

func (x *ToolInvocationOptions) GetValidateParameters() bool {
	if x != nil {
		return x.ValidateParameters
	}
	return false
}

func (x *ToolInvocationOptions) GetRequireConfirmation() bool {
	if x != nil {
		return x.RequireConfirmation
	}
	return false
}

func (x *ToolInvocationOptions) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ToolInvocationOptions) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

type MCPToolResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ResultData    *structpb.Struct       `protobuf:"bytes,2,opt,name=result_data,json=resultData,proto3" json:"result_data,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MCPToolResult) Reset() {
	*x = MCPToolResult{}
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPToolResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPToolResult) ProtoMessage() {}

func (x *MCPToolResult) ProtoReflect() protoreflect.Message {
	mi := &file_nodus_v1_mcp_v1_connection_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPToolResult.ProtoReflect.Descriptor instead.
func (*MCPToolResult) Descriptor() ([]byte, []int) {
	return file_nodus_v1_mcp_v1_connection_proto_rawDescGZIP(), []int{9}
}

func (x *MCPToolResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MCPToolResult) GetResultData() *structpb.Struct {
	if x != nil {
		return x.ResultData
	}
	return nil
}

func (x *MCPToolResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *MCPToolResult) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_nodus_v1_mcp_v1_connection_proto protoreflect.FileDescriptor

const file_nodus_v1_mcp_v1_connection_proto_rawDesc = "" +
	"\n" +
	" nodus/v1/mcp/v1/connection.proto\x12\x0fnodus.v1.mcp.v1\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1cnodus/v1/mcp/v1/server.proto\x1a\x1anodus/v1/mcp/v1/tool.proto\x1a\x1fnodus/v1/common/v1/errors.proto\"\xf9\x02\n" +
	"\x18RegisterMCPServerRequest\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12\x1a\n" +
	"\bendpoint\x18\x02 \x01(\tR\bendpoint\x12?\n" +
	"\vserver_type\x18\x03 \x01(\x0e2\x1e.nodus.v1.mcp.v1.MCPServerTypeR\n" +
	"serverType\x12Q\n" +
	"\x11connection_config\x18\x04 \x01(\v2$.nodus.v1.mcp.v1.MCPConnectionConfigR\x10connectionConfig\x12S\n" +
	"\bmetadata\x18\x05 \x03(\v27.nodus.v1.mcp.v1.RegisterMCPServerRequest.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9b\x02\n" +
	"\x19RegisterMCPServerResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x1b\n" +
	"\tserver_id\x18\x02 \x01(\tR\bserverId\x12J\n" +
	"\fcapabilities\x18\x03 \x01(\v2&.nodus.v1.mcp.v1.MCPServerCapabilitiesR\fcapabilities\x12A\n" +
	"\x0favailable_tools\x18\x04 \x03(\v2\x18.nodus.v1.mcp.v1.MCPToolR\x0eavailableTools\x128\n" +
	"\x05error\x18\x05 \x01(\v2\".nodus.v1.common.v1.ExecutionErrorR\x05error\"\xa2\x01\n" +
	"\x15ListMCPServersRequest\x12\x1d\n" +
	"\n" +
	"server_ids\x18\x01 \x03(\tR\tserverIds\x12E\n" +
	"\rstatus_filter\x18\x02 \x01(\x0e2 .nodus.v1.mcp.v1.MCPServerStatusR\fstatusFilter\x12#\n" +
	"\rinclude_tools\x18\x03 \x01(\bR\fincludeTools\"w\n" +
	"\x16ListMCPServersResponse\x128\n" +
	"\aservers\x18\x01 \x03(\v2\x1e.nodus.v1.mcp.v1.MCPServerInfoR\aservers\x12#\n" +
	"\rtotal_servers\x18\x02 \x01(\x05R\ftotalServers\"\xaf\x01\n" +
	"\x14QueryMCPToolsRequest\x12\x1d\n" +
	"\n" +
	"server_ids\x18\x01 \x03(\tR\tserverIds\x123\n" +
	"\x06filter\x18\x02 \x01(\v2\x1b.nodus.v1.mcp.v1.ToolFilterR\x06filter\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12-\n" +
	"\x12continuation_token\x18\x04 \x01(\tR\x11continuationToken\"\xa4\x01\n" +
	"\x15QueryMCPToolsResponse\x12.\n" +
	"\x05tools\x18\x01 \x03(\v2\x18.nodus.v1.mcp.v1.MCPToolR\x05tools\x126\n" +
	"\x17next_continuation_token\x18\x02 \x01(\tR\x15nextContinuationToken\x12#\n" +
	"\rtotal_matches\x18\x03 \x01(\x05R\ftotalMatches\"\xb1\x01\n" +
	"\n" +
	"ToolFilter\x12=\n" +
	"\n" +
	"categories\x18\x01 \x03(\x0e2\x1d.nodus.v1.mcp.v1.ToolCategoryR\n" +
	"categories\x12\x12\n" +
	"\x04tags\x18\x02 \x03(\tR\x04tags\x12!\n" +
	"\fname_pattern\x18\x03 \x01(\tR\vnamePattern\x12-\n" +
	"\x12supports_streaming\x18\x04 \x01(\bR\x11supportsStreaming\"\xc4\x01\n" +
	"\x11MCPToolInvocation\x12\x17\n" +
	"\atool_id\x18\x01 \x01(\tR\x06toolId\x12\x1b\n" +
	"\tserver_id\x18\x02 \x01(\tR\bserverId\x127\n" +
	"\n" +
	"parameters\x18\x03 \x01(\v2\x17.google.protobuf.StructR\n" +
	"parameters\x12@\n" +
	"\aoptions\x18\x04 \x01(\v2&.nodus.v1.mcp.v1.ToolInvocationOptionsR\aoptions\"\xbb\x02\n" +
	"\x15ToolInvocationOptions\x12/\n" +
	"\x13validate_parameters\x18\x01 \x01(\bR\x12validateParameters\x121\n" +
	"\x14require_confirmation\x18\x02 \x01(\bR\x13requireConfirmation\x123\n" +
	"\atimeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12M\n" +
	"\acontext\x18\x04 \x03(\v23.nodus.v1.mcp.v1.ToolInvocationOptions.ContextEntryR\acontext\x1a:\n" +
	"\fContextEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8f\x02\n" +
	"\rMCPToolResult\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x128\n" +
	"\vresult_data\x18\x02 \x01(\v2\x17.google.protobuf.StructR\n" +
	"resultData\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\x12H\n" +
	"\bmetadata\x18\x04 \x03(\v2,.nodus.v1.mcp.v1.MCPToolResult.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\xc7\x01\n" +
	"\x13com.nodus.v1.mcp.v1B\x0fConnectionProtoP\x01Z@github.com/spounge-ai/spounge-proto/gen/go/nodus/v1/mcp/v1;mcpv1\xa2\x02\x03NVM\xaa\x02\x0fNodus.V1.Mcp.V1\xca\x02\x0fNodus\\V1\\Mcp\\V1\xe2\x02\x1bNodus\\V1\\Mcp\\V1\\GPBMetadata\xea\x02\x12Nodus::V1::Mcp::V1b\x06proto3"

var (
	file_nodus_v1_mcp_v1_connection_proto_rawDescOnce sync.Once
	file_nodus_v1_mcp_v1_connection_proto_rawDescData []byte
)

func file_nodus_v1_mcp_v1_connection_proto_rawDescGZIP() []byte {
	file_nodus_v1_mcp_v1_connection_proto_rawDescOnce.Do(func() {
		file_nodus_v1_mcp_v1_connection_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nodus_v1_mcp_v1_connection_proto_rawDesc), len(file_nodus_v1_mcp_v1_connection_proto_rawDesc)))
	})
	return file_nodus_v1_mcp_v1_connection_proto_rawDescData
}

var file_nodus_v1_mcp_v1_connection_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_nodus_v1_mcp_v1_connection_proto_goTypes = []any{
	(*RegisterMCPServerRequest)(nil),  // 0: nodus.v1.mcp.v1.RegisterMCPServerRequest
	(*RegisterMCPServerResponse)(nil), // 1: nodus.v1.mcp.v1.RegisterMCPServerResponse
	(*ListMCPServersRequest)(nil),     // 2: nodus.v1.mcp.v1.ListMCPServersRequest
	(*ListMCPServersResponse)(nil),    // 3: nodus.v1.mcp.v1.ListMCPServersResponse
	(*QueryMCPToolsRequest)(nil),      // 4: nodus.v1.mcp.v1.QueryMCPToolsRequest
	(*QueryMCPToolsResponse)(nil),     // 5: nodus.v1.mcp.v1.QueryMCPToolsResponse
	(*ToolFilter)(nil),                // 6: nodus.v1.mcp.v1.ToolFilter
	(*MCPToolInvocation)(nil),         // 7: nodus.v1.mcp.v1.MCPToolInvocation
	(*ToolInvocationOptions)(nil),     // 8: nodus.v1.mcp.v1.ToolInvocationOptions
	(*MCPToolResult)(nil),             // 9: nodus.v1.mcp.v1.MCPToolResult
	nil,                               // 10: nodus.v1.mcp.v1.RegisterMCPServerRequest.MetadataEntry
	nil,                               // 11: nodus.v1.mcp.v1.ToolInvocationOptions.ContextEntry
	nil,                               // 12: nodus.v1.mcp.v1.MCPToolResult.MetadataEntry
	(MCPServerType)(0),                // 13: nodus.v1.mcp.v1.MCPServerType
	(*MCPConnectionConfig)(nil),       // 14: nodus.v1.mcp.v1.MCPConnectionConfig
	(*MCPServerCapabilities)(nil),     // 15: nodus.v1.mcp.v1.MCPServerCapabilities
	(*MCPTool)(nil),                   // 16: nodus.v1.mcp.v1.MCPTool
	(*v1.ExecutionError)(nil),         // 17: nodus.v1.common.v1.ExecutionError
	(MCPServerStatus)(0),              // 18: nodus.v1.mcp.v1.MCPServerStatus
	(*MCPServerInfo)(nil),             // 19: nodus.v1.mcp.v1.MCPServerInfo
	(ToolCategory)(0),                 // 20: nodus.v1.mcp.v1.ToolCategory
	(*structpb.Struct)(nil),           // 21: google.protobuf.Struct
	(*durationpb.Duration)(nil),       // 22: google.protobuf.Duration
}
var file_nodus_v1_mcp_v1_connection_proto_depIdxs = []int32{
	13, // 0: nodus.v1.mcp.v1.RegisterMCPServerRequest.server_type:type_name -> nodus.v1.mcp.v1.MCPServerType
	14, // 1: nodus.v1.mcp.v1.RegisterMCPServerRequest.connection_config:type_name -> nodus.v1.mcp.v1.MCPConnectionConfig
	10, // 2: nodus.v1.mcp.v1.RegisterMCPServerRequest.metadata:type_name -> nodus.v1.mcp.v1.RegisterMCPServerRequest.MetadataEntry
	15, // 3: nodus.v1.mcp.v1.RegisterMCPServerResponse.capabilities:type_name -> nodus.v1.mcp.v1.MCPServerCapabilities
	16, // 4: nodus.v1.mcp.v1.RegisterMCPServerResponse.available_tools:type_name -> nodus.v1.mcp.v1.MCPTool
	17, // 5: nodus.v1.mcp.v1.RegisterMCPServerResponse.error:type_name -> nodus.v1.common.v1.ExecutionError
	18, // 6: nodus.v1.mcp.v1.ListMCPServersRequest.status_filter:type_name -> nodus.v1.mcp.v1.MCPServerStatus
	19, // 7: nodus.v1.mcp.v1.ListMCPServersResponse.servers:type_name -> nodus.v1.mcp.v1.MCPServerInfo
	6,  // 8: nodus.v1.mcp.v1.QueryMCPToolsRequest.filter:type_name -> nodus.v1.mcp.v1.ToolFilter
	16, // 9: nodus.v1.mcp.v1.QueryMCPToolsResponse.tools:type_name -> nodus.v1.mcp.v1.MCPTool
	20, // 10: nodus.v1.mcp.v1.ToolFilter.categories:type_name -> nodus.v1.mcp.v1.ToolCategory
	21, // 11: nodus.v1.mcp.v1.MCPToolInvocation.parameters:type_name -> google.protobuf.Struct
	8,  // 12: nodus.v1.mcp.v1.MCPToolInvocation.options:type_name -> nodus.v1.mcp.v1.ToolInvocationOptions
	22, // 13: nodus.v1.mcp.v1.ToolInvocationOptions.timeout:type_name -> google.protobuf.Duration
	11, // 14: nodus.v1.mcp.v1.ToolInvocationOptions.context:type_name -> nodus.v1.mcp.v1.ToolInvocationOptions.ContextEntry
	21, // 15: nodus.v1.mcp.v1.MCPToolResult.result_data:type_name -> google.protobuf.Struct
	12, // 16: nodus.v1.mcp.v1.MCPToolResult.metadata:type_name -> nodus.v1.mcp.v1.MCPToolResult.MetadataEntry
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_nodus_v1_mcp_v1_connection_proto_init() }
func file_nodus_v1_mcp_v1_connection_proto_init() {
	if File_nodus_v1_mcp_v1_connection_proto != nil {
		return
	}
	file_nodus_v1_mcp_v1_server_proto_init()
	file_nodus_v1_mcp_v1_tool_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nodus_v1_mcp_v1_connection_proto_rawDesc), len(file_nodus_v1_mcp_v1_connection_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nodus_v1_mcp_v1_connection_proto_goTypes,
		DependencyIndexes: file_nodus_v1_mcp_v1_connection_proto_depIdxs,
		MessageInfos:      file_nodus_v1_mcp_v1_connection_proto_msgTypes,
	}.Build()
	File_nodus_v1_mcp_v1_connection_proto = out.File
	file_nodus_v1_mcp_v1_connection_proto_goTypes = nil
	file_nodus_v1_mcp_v1_connection_proto_depIdxs = nil
}
